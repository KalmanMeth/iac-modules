tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - datatypes.yml

# capability_types:

#   sodalite.capabilities.modak.ModakEndpoint:
#     derived_from: tosca.capabilities.Root

node_types:

  sodalite.nodes.modak:
    derived_from: tosca.nodes.Root
    properties:
      endpoint:
        type: string
    capabilities:
      modak_endpoint:
        # type: sodalite.capabilities.modak.ModakEndpoint
        type: tosca.capabilities.Root
        valid_source_types: [ sodalite.nodes.modak.job ]


  # here we can have the playbook that directly interfaces MODAK (src/docker)
  # and then proceed with the normal job workflow from HPC examples
  sodalite.nodes.modak.job:
    derived_from: tosca.nodes.Root
    properties:
      job_script:
        type: string
      job_options:
        type: map
        entry_schema:
          type: sodalite.datatypes.modak.job_options
      application:
        type: map
        entry_schema:
          type: sodalite.datatypes.modak.application
      target:
        type: map
        entry_schema:
          type: sodalite.datatypes.modak.target
      optimisation:
        type: map
        entry_schema:
          type: sodalite.datatypes.modak.optimisation
    attributes:
      artifact_url:
        type: string
      container_runtime:
        type: string
    requirements:
      - modak_endpoint:
          node: sodalite.nodes.modak
          # capability: sodalite.capabilities.modak.ModakEndpoint
          capability: tosca.capabilities.Root
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              # job script location
              job_script: { default: { get_property: [SELF, job_script] } }
              # modak_endpoint properties
              modak_endpoint: { default: { get_property: [SELF, modak_endpoint, endpoint] } }
              # job_options properties
              job_options: { default: { get_property: [SELF, job_options] } }
              # application properties
              application: { default: { get_property: [SELF, application] } }
              # target properties
              target: { default: { get_property: [SELF, target] } }
              # optimisation properties
              optimisation: { default: { get_property: [SELF, optimisation] } }
            implementation: 
              primary: playbooks/create-modak-job.yml