---
  - hosts: all
    gather_facts: no
    tasks:
    - name: >
        Create temporary inventory for wm,
        since opera requires internal envvars to access the target.
        Need more examples to access static nodes without specifying them in the inventory file
      add_host:
        name: wm
        groups: wm
        ansible_host: "{{ wm_public_address }}"
        ansible_user: "{{ wm_username }}"
        ansible_ssh_private_key_file: "{{ wm_keypath }}"
        ansible_ssh_common_args: >
          -o IdentitiesOnly=yes
          -o BatchMode=yes
          -o UserKnownHostsFile=/dev/null
          -o StrictHostKeyChecking=no

  - hosts: wm
    gather_facts: yes
    vars:
      epoch: "00:00:00"
      walltime: "{{ job_walltime }}"
      walltime_sec: "{{ (walltime | to_datetime('%H:%M:%S')).strftime('%s') | int - (epoch | to_datetime('%H:%M:%S')).strftime('%s') | int }}"
      monitor_period: "{{ job_monitor_period }}" # overall monitoring delay: consists of 2 delay steps due to poll of async and delay of until loop
      monitor_delay_step: "{{ (monitor_period / 2) | round | int }}" # each step is half of overall delay
      monitor_retries_headroom: "{{ job_monitor_retries_headroom }}" # additional retries for long job completion
      monitor_retries: "{{ (walltime_sec | int /  monitor_period) | round | int + monitor_retries_headroom }}"
    tasks:
    - name: Run continuously job_info to monitor the status of the job
      sodalite.hpc.job_info:
        job_id: '{{ job_id }}'
      register: job_monitor
      until: "job_monitor.jobs[0].job_state == 'COMPLETED' or job_monitor.jobs[0].job_state == 'FAILED' or job_monitor.jobs[0].job_state == 'C'"
      delay: "{{ monitor_delay_step }}"
      retries: "{{ monitor_retries }}"
      async: "{{ walltime_sec | int }}"
      poll: "{{ monitor_delay_step }}"

    - name: Wait the status monitoring to finish
      async_status:
        jid: "{{ job_monitor.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ monitor_retries }}"

    - name: set state deleted after job is completed
      set_stats:
        data:
          state: "deleted"

    - name: Check the exit status
      sodalite.hpc.job_info:
        job_id: '{{ job_id }}'
      register: job_exit_status

    # Do some failure mitigation actions here
    - name: React to the error
      shell: echo "Here should be failure management"
      when: "job_exit_status.jobs[0].exit_code != '0:0'"

    - fail:
        msg: "Job stopped with non-zero exit {{ job_exit_status.jobs[0].exit_code }}"
      when: "job_exit_status.jobs[0].exit_code != '0:0'"

